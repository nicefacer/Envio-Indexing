// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Logging = require("./Logging.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function mapFunctionRegisterName(functionRegister) {
  if (functionRegister) {
    return "Handler";
  } else {
    return "Loader";
  }
}

var hasPrintedWarning = new Set();

function getDefaultLoaderHandler(functionRegister, eventName, param, param$1) {
  var functionName = functionRegister ? "Handler" : "Loader";
  var repeatKey = "" + eventName + "-" + functionName + "";
  if (!hasPrintedWarning.has(repeatKey)) {
    Logging.warn("Ignored " + eventName + " event, as there is no " + functionName + " registered. You need to implement a " + eventName + "" + functionName + " method in your handler file. This will apply to all future " + eventName + " events.");
    hasPrintedWarning.add(repeatKey);
    return ;
  }
  
}

var swapLoader = {
  contents: undefined
};

var swapHandler = {
  contents: undefined
};

function loader(userLoader) {
  swapLoader.contents = userLoader;
}

function handler(userHandler) {
  swapHandler.contents = userHandler;
}

function getLoader(param) {
  return Belt_Option.getWithDefault(swapLoader.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Loader */0, "Swap", param, param$1);
              }));
}

function getHandler(param) {
  return Belt_Option.getWithDefault(swapHandler.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Handler */1, "Swap", param, param$1);
              }));
}

var Swap = {
  loader: loader,
  handler: handler,
  getLoader: getLoader,
  getHandler: getHandler
};

var mintLoader = {
  contents: undefined
};

var mintHandler = {
  contents: undefined
};

function loader$1(userLoader) {
  mintLoader.contents = userLoader;
}

function handler$1(userHandler) {
  mintHandler.contents = userHandler;
}

function getLoader$1(param) {
  return Belt_Option.getWithDefault(mintLoader.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Loader */0, "Mint", param, param$1);
              }));
}

function getHandler$1(param) {
  return Belt_Option.getWithDefault(mintHandler.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Handler */1, "Mint", param, param$1);
              }));
}

var Mint = {
  loader: loader$1,
  handler: handler$1,
  getLoader: getLoader$1,
  getHandler: getHandler$1
};

var UniswapV3PoolContract = {
  Swap: Swap,
  Mint: Mint
};

exports.mapFunctionRegisterName = mapFunctionRegisterName;
exports.hasPrintedWarning = hasPrintedWarning;
exports.getDefaultLoaderHandler = getDefaultLoaderHandler;
exports.UniswapV3PoolContract = UniswapV3PoolContract;
/* hasPrintedWarning Not a pure module */
